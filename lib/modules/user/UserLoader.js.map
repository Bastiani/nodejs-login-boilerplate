{"version":3,"sources":["../../../src/modules/user/UserLoader.js"],"names":["User","constructor","data","id","_id","name","email","active","isAdmin","getLoader","DataLoader","ids","UserModel","viewerCanSee","context","load","dataloaders","UserLoader","console","log","err","clearCache","clear","toString","loadUsers","args","user","search","conditions","$regex","RegExp","users","find","sort","createdAt","cursor","loader"],"mappings":";;;;;;;AACA;;;;AAIA;;AAIA;;;;;;AAMe,MAAMA,IAAN,CAAW;;AAaxBC,cAAYC,IAAZ,EAAgC;AAC9B,SAAKC,EAAL,GAAUD,KAAKC,EAAf;AACA,SAAKC,GAAL,GAAWF,KAAKE,GAAhB;AACA,SAAKC,IAAL,GAAYH,KAAKG,IAAjB;AACA,SAAKC,KAAL,GAAaJ,KAAKI,KAAlB;AACA,SAAKC,MAAL,GAAcL,KAAKK,MAAnB;AACA,SAAKC,OAAL,GAAeN,KAAKM,OAApB;AACD;AApBuB;;kBAALR,I;AAuBd,MAAMS,gCAAY,MAAM,IAAIC,oBAAJ,CAAeC,OAAO,2CAAeC,mBAAf,EAA0BD,GAA1B,CAAtB,CAAxB;;AAEP,MAAME,eAAe,CAACC,OAAD,EAAUZ,IAAV,KAAmB,IAAxC;;AAEO,MAAMa,sBAAO,OAAOD,OAAP,EAAgCX,EAAhC,KAA+D;AACjF,MAAI,CAACA,EAAL,EAAS;AACP,WAAO,IAAP;AACD;;AAED,MAAID,IAAJ;AACA,MAAI;AACFA,WAAO,MAAMY,QAAQE,WAAR,CAAoBC,UAApB,CAA+BF,IAA/B,CAAoCZ,EAApC,CAAb;AACAe,YAAQC,GAAR,CAAY,kBAAZ,EAAgCjB,IAAhC;AACD,GAHD,CAGE,OAAOkB,GAAP,EAAY;AACZ,WAAO,IAAP;AACD;AACD,SAAOP,aAAaC,OAAb,EAAsBZ,IAAtB,IAA8B,IAAIF,IAAJ,CAASE,IAAT,CAA9B,GAA+C,IAAtD;AACD,CAbM;;AAeA,MAAMmB,kCAAa,CAAC,EAAEL,WAAF,EAAD,EAAkCb,EAAlC,KAAiDa,YAAYC,UAAZ,CAAuBK,KAAvB,CAA6BnB,GAAGoB,QAAH,EAA7B,CAApE;;AAEA,MAAMC,gCAAY,OAAOV,OAAP,EAAgCW,IAAhC,KAAqE;AAC5F,QAAM,EAAEC,IAAF,KAAWZ,OAAjB;AACA,QAAM,EAAEa,MAAF,KAAaF,IAAnB;AACA,QAAMG,aAAa;AACjB,QAAID,UAAU,IAAV,GAAiB,EAAEtB,MAAM,EAAEwB,QAAQ,IAAIC,MAAJ,CAAY,IAAGL,KAAKE,MAAO,EAA3B,EAA8B,IAA9B,CAAV,EAAR,EAAjB,GAA6E,EAAjF;AADiB,GAAnB;;AAIA,QAAMI,QAAQnB,oBAAUoB,IAAV,CAAeJ,UAAf,EAA2BK,IAA3B,CAAgC,EAAEC,WAAW,CAAC,CAAd,EAAhC,CAAd;;AAEA,SAAO,sDAA0B;AAC/BC,YAAQJ,KADuB;AAE/BjB,WAF+B;AAG/BW,QAH+B;AAI/BW,YAAQrB;AAJuB,GAA1B,CAAP;AAMD,CAfM","file":"UserLoader.js","sourcesContent":["// @flow\nimport DataLoader from 'dataloader';\n\nimport type { ConnectionArguments } from 'graphql-relay';\n\nimport { connectionFromMongoCursor, mongooseLoader } from '@entria/graphql-mongoose-loader';\n\nimport type { GraphQLContext, UserFlowType } from '../../flow';\n\nimport UserModel from './UserModel';\n\ntype Args = {\n  search: string,\n};\n\nexport default class User {\n  id: string;\n\n  _id: string;\n\n  name: string;\n\n  email: string;\n\n  active: boolean;\n\n  isAdmin: boolean;\n\n  constructor(data: UserFlowType) {\n    this.id = data.id;\n    this._id = data._id;\n    this.name = data.name;\n    this.email = data.email;\n    this.active = data.active;\n    this.isAdmin = data.isAdmin;\n  }\n}\n\nexport const getLoader = () => new DataLoader(ids => mongooseLoader(UserModel, ids));\n\nconst viewerCanSee = (context, data) => true;\n\nexport const load = async (context: GraphQLContext, id: string): Promise<?User> => {\n  if (!id) {\n    return null;\n  }\n\n  let data;\n  try {\n    data = await context.dataloaders.UserLoader.load(id);\n    console.log('=======>>> load ', data);\n  } catch (err) {\n    return null;\n  }\n  return viewerCanSee(context, data) ? new User(data) : null;\n};\n\nexport const clearCache = ({ dataloaders }: GraphQLContext, id: string) => dataloaders.UserLoader.clear(id.toString());\n\nexport const loadUsers = async (context: GraphQLContext, args: ConnectionArguments & Args) => {\n  const { user } = context;\n  const { search } = args;\n  const conditions = {\n    ...(search != null ? { name: { $regex: new RegExp(`^${args.search}`, 'ig') } } : {}),\n  };\n\n  const users = UserModel.find(conditions).sort({ createdAt: -1 });\n\n  return connectionFromMongoCursor({\n    cursor: users,\n    context,\n    args,\n    loader: load,\n  });\n};\n"]}